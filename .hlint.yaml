- arguments: [ --cross, --threads ]
- group: { name: dollar, enabled: true }
- group: { name: generalise, enabled: true }
- ignore: { name: Use lambda-case }
- ignore: { name: Use <|> }
- ignore: { name: Use &&& }
- modules:
    - { name: Control.Applicative, as: Applicative }
    - { name: Control.Exception, as: Exception }
    - { name: Control.Monad, as: Monad }
    - { name: Control.Monad.Trans.Class, as: Trans }
    - { name: Control.Monad.Trans.State, as: State }
    - { name: Data.Aeson, as: Json }
    - { name: Data.Aeson.Encode.Pretty, as: Json }
    - { name: Data.Aeson.TH, as: Json }
    - { name: Data.Binary, as: Binary }
    - { name: Data.Binary.Bits, as: BinaryBits }
    - { name: Data.Binary.Bits.Get, as: BinaryBits }
    - { name: Data.Binary.Bits.Put, as: BinaryBits }
    - { name: Data.Binary.Get, as: Binary }
    - { name: Data.Binary.Put, as: Binary }
    - { name: Data.Bits, as: Bits }
    - { name: Data.ByteString, as: Bytes }
    - { name: Data.ByteString.Lazy, as: LazyBytes }
    - { name: Data.ByteString.Lazy.Char8, as: LazyBytes8 }
    - { name: Data.Char, as: Char }
    - { name: Data.Int, as: Int }
    - { name: Data.IntMap, as: IntMap }
    - { name: Data.List, as: List }
    - { name: Data.Map, as: Map }
    - { name: Data.Maybe, as: Maybe }
    - { name: Data.Set, as: Set }
    - { name: Data.Text, as: Text }
    - { name: Data.Text.Encoding, as: Text }
    - { name: Data.Tuple, as: Tuple }
    - { name: Data.Version, as: Version }
    - { name: Data.Word, as: Word }
    - { name: Language.Haskell.Interpreter, as: Hint }
    - { name: Language.Haskell.TH, as: TH }
    - { name: Network.HTTP.Client, as: Client }
    - { name: Network.HTTP.Client.TLS, as: Client }
    - { name: Paths_rattletrap, as: This }
    - { name: System.Console.GetOpt, as: Console }
    - { name: System.Environment, as: Environment }
    - { name: System.Exit, as: Exit }
    - { name: System.FilePath, as: Path }
    - { name: System.IO, as: IO }
    - { name: Text.Printf, as: Printf }
